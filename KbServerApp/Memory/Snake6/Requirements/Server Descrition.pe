The Server side of a multi user "Snake" online game.
Server is SnaekServer.py
    Architecture: python 3, with Async IO, aiohttp serving SnakeClient.html, and connect via websockets
    The game_board (a 100 x 100 2d character representation of the playing ground) is kept up to date
    with the values of Snakes and Foods; Therefor you can check for collisions by checking the value of
    the character in the game_board at position (x, y).

Ticks Logic:
    The game is implemented as Ticks (5 per second).
    Tick:
        1. move each snake who's direction is not 'Stop':
            new_head = head of snake + snake direction.

            if new_head x or y are not in bounds: Snake_Dies
            if game_board at new_head is a snake character: Snake_Dies.

            if game_board at new_head is a food:
                - game_board at new_head draw client char
                - push new_head (x, y) onto front of snake
                - remove new_head from foods.
                - find a random (fx, fy) that is Space, add it to foods, and draw food char.
                - add 100 to snake score.

            if game_board at new_head is Space:
                - game_board at new_head draw client char
                - push new_head (x, y) onto front of snake
                - pop last position from snake as tail.
                - game_board at tail draw space
                - add 1 to snake score

        2. Send GameStatus to all connected Clients.

Snake_Dies:
    - Send SnakeDied message to client.
    - erase client snake from the board.
    - Do Reset_A_Client:

Reset_A_Client:
    - new snake head is at random position so new snake is [(x, y), (x, y+1), (x, y+2)]
        where game_board at each [(x, y), (x, y+1), (x, y+2)] == space
            set client snake to new snake
    - draw Client snake on game_board
    - the Client score is set to zero
    - the Client direction is set to "Stop"

When Server receives "Joining":
    - if free_snake_chars is empty then close websocket
    - take a char from free_snake_chars and assign it to the Client as 'char'.
    - the client['username']= username
    - Do Reset_A_Client.

Server When websocket disconnect:
    - return Client char to game_state free_snake_chars.
    - erase client snake from game_board
    - del game_status['clients'][websocket]

Server At Startup:
    - At startup The Server will start a HTTP Server that serves the file SnakeClient.html

