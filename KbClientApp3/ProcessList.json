{
  "test": [
    {
      "py/object": "KbServerApp.step.Step",
      "name": "Step 1",
      "prompt_name": "Prompts/Test Prompt.pe",
      "ai": {
        "py/object": "KbServerApp.ai.AI",
        "temperature": 0,
        "max_tokens": 3000,
        "model": "gpt-3.5-turbo-16k",
        "mode": "chat"
      },
      "storage_path": "Dynamic/Requirements",
      "messages": [],
      "response": {},
      "answer": "",
      "files": {},
      "e_stats": {
        "prompt_tokens": 0,
        "completion_tokens": 0,
        "total_tokens": 0,
        "sp_cost": 0.0,
        "sc_cost": 0.0,
        "s_total": 0.0,
        "elapsed_time": 0.0
      }
    },
    {
      "py/object": "KbServerApp.step.Step",
      "name": "Step 2",
      "prompt_name": "Prompts/Test Prompt 2.pe",
      "ai": {
        "py/object": "KbServerApp.ai.AI",
        "temperature": 0,
        "max_tokens": 3000,
        "model": "text-babbage-001",
        "mode": "complete"
      },
      "storage_path": "Dynamic/Components",
      "messages": [],
      "response": {},
      "answer": "",
      "files": {},
      "e_stats": {
        "prompt_tokens": 0,
        "completion_tokens": 0,
        "total_tokens": 0,
        "sp_cost": 0.0,
        "sc_cost": 0.0,
        "s_total": 0.0,
        "elapsed_time": 0.0
      }
    }
  ],
  "Second Test": [
    {
      "py/object": "KbServerApp.step.Step",
      "name": "First Step",
      "prompt_name": "Knowledge/Product Description Short.pe",
      "ai": {
        "py/object": "KbServerApp.ai.AI",
        "temperature": 0.0,
        "max_tokens": "3000",
        "model": "gpt-3.5-turbo",
        "mode": "chat"
      },
      "storage_path": "Knowledge",
      "messages": [],
      "response": {},
      "answer": "",
      "files": {},
      "e_stats": {
        "prompt_tokens": 0.0,
        "completion_tokens": 0.0,
        "total_tokens": 0.0,
        "sp_cost": 0.0,
        "sc_cost": 0.0,
        "s_total": 0.0,
        "elapsed_time": 0.0
      }
    }
  ],
  "KEGUI": [
    {
      "py/object": "KbServerApp.step.Step",
      "name": "1. Generate window structure",
      "prompt_name": "KEGUI/MainWindow requirements.pe",
      "ai": {
        "py/object": "KbServerApp.ai.AI",
        "temperature": 0.0,
        "max_tokens": "3000",
        "model": "gpt-3.5-turbo-16k",
        "mode": "chat"
      },
      "storage_path": "Dynamic/KEGUI/src",
      "messages": [
        {
          "role": "system",
          "content": "\nYou are a python programmer.\nYou will use the pyside6 toolkit for GUI.\nYou will write functional code for each iteration.\nFiles will be delineated in the following format:\n\nfilename\n```python\n[actual code]\n```"
        },
        {
          "role": "user",
          "content": "\nGenerate main_window.py which will consist of 3 tabs.\n  \"WorkBench\" (loaded from workbench_tab.py)\n  \"Log\" (Loaded from log_tab.py)\n  \"Coms\" (loaded from coms_tab.py)\n\n Generate all 4 files."
        }
      ],
      "response": {
        "py/object": "openai.openai_object.OpenAIObject",
        "id": "chatcmpl-7hBJ2rxrcm18K9bWo0nJSwNhPlBqs",
        "object": "chat.completion",
        "created": 1690525920,
        "model": "gpt-3.5-turbo-16k-0613",
        "choices": [
          {
            "py/object": "openai.openai_object.OpenAIObject",
            "index": 0,
            "message": {
              "py/object": "openai.openai_object.OpenAIObject",
              "role": "assistant",
              "content": "main_window.py\n```python\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QTabWidget\n\nfrom workbench_tab import WorkBenchTab\nfrom log_tab import LogTab\nfrom coms_tab import ComsTab\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n\n        self.setWindowTitle(\"Main Window\")\n\n        self.tab_widget = QTabWidget()\n        self.setCentralWidget(self.tab_widget)\n\n        self.workbench_tab = WorkBenchTab()\n        self.log_tab = LogTab()\n        self.coms_tab = ComsTab()\n\n        self.tab_widget.addTab(self.workbench_tab, \"WorkBench\")\n        self.tab_widget.addTab(self.log_tab, \"Log\")\n        self.tab_widget.addTab(self.coms_tab, \"Coms\")\n\n\nif __name__ == \"__main__\":\n    app = QApplication([])\n    window = MainWindow()\n    window.show()\n    app.exec()\n```\n\nworkbench_tab.py\n```python\nfrom PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel\n\n\nclass WorkBenchTab(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        layout = QVBoxLayout()\n        label = QLabel(\"WorkBench Tab\")\n        layout.addWidget(label)\n\n        self.setLayout(layout)\n```\n\nlog_tab.py\n```python\nfrom PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel\n\n\nclass LogTab(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        layout = QVBoxLayout()\n        label = QLabel(\"Log Tab\")\n        layout.addWidget(label)\n\n        self.setLayout(layout)\n```\n\ncoms_tab.py\n```python\nfrom PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel\n\n\nclass ComsTab(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        layout = QVBoxLayout()\n        label = QLabel(\"Coms Tab\")\n        layout.addWidget(label)\n\n        self.setLayout(layout)\n```",
              "__dict__": {
                "_response_ms": null,
                "_retrieve_params": {},
                "api_key": "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",
                "api_version": null,
                "api_type": null,
                "organization": "user-jdrvlyfsallqbsgsgbnmqk85",
                "api_base_override": null,
                "engine": null,
                "_previous": {
                  "role": "assistant",
                  "content": "main_window.py\n```python\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QTabWidget\n\nfrom workbench_tab import WorkBenchTab\nfrom log_tab import LogTab\nfrom coms_tab import ComsTab\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n\n        self.setWindowTitle(\"Main Window\")\n\n        self.tab_widget = QTabWidget()\n        self.setCentralWidget(self.tab_widget)\n\n        self.workbench_tab = WorkBenchTab()\n        self.log_tab = LogTab()\n        self.coms_tab = ComsTab()\n\n        self.tab_widget.addTab(self.workbench_tab, \"WorkBench\")\n        self.tab_widget.addTab(self.log_tab, \"Log\")\n        self.tab_widget.addTab(self.coms_tab, \"Coms\")\n\n\nif __name__ == \"__main__\":\n    app = QApplication([])\n    window = MainWindow()\n    window.show()\n    app.exec()\n```\n\nworkbench_tab.py\n```python\nfrom PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel\n\n\nclass WorkBenchTab(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        layout = QVBoxLayout()\n        label = QLabel(\"WorkBench Tab\")\n        layout.addWidget(label)\n\n        self.setLayout(layout)\n```\n\nlog_tab.py\n```python\nfrom PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel\n\n\nclass LogTab(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        layout = QVBoxLayout()\n        label = QLabel(\"Log Tab\")\n        layout.addWidget(label)\n\n        self.setLayout(layout)\n```\n\ncoms_tab.py\n```python\nfrom PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel\n\n\nclass ComsTab(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        layout = QVBoxLayout()\n        label = QLabel(\"Coms Tab\")\n        layout.addWidget(label)\n\n        self.setLayout(layout)\n```"
                }
              }
            },
            "finish_reason": "stop",
            "__dict__": {
              "_response_ms": null,
              "_retrieve_params": {},
              "api_key": "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",
              "api_version": null,
              "api_type": null,
              "organization": "user-jdrvlyfsallqbsgsgbnmqk85",
              "api_base_override": null,
              "engine": null,
              "_previous": {
                "index": 0,
                "message": {
                  "role": "assistant",
                  "content": "main_window.py\n```python\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QTabWidget\n\nfrom workbench_tab import WorkBenchTab\nfrom log_tab import LogTab\nfrom coms_tab import ComsTab\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n\n        self.setWindowTitle(\"Main Window\")\n\n        self.tab_widget = QTabWidget()\n        self.setCentralWidget(self.tab_widget)\n\n        self.workbench_tab = WorkBenchTab()\n        self.log_tab = LogTab()\n        self.coms_tab = ComsTab()\n\n        self.tab_widget.addTab(self.workbench_tab, \"WorkBench\")\n        self.tab_widget.addTab(self.log_tab, \"Log\")\n        self.tab_widget.addTab(self.coms_tab, \"Coms\")\n\n\nif __name__ == \"__main__\":\n    app = QApplication([])\n    window = MainWindow()\n    window.show()\n    app.exec()\n```\n\nworkbench_tab.py\n```python\nfrom PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel\n\n\nclass WorkBenchTab(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        layout = QVBoxLayout()\n        label = QLabel(\"WorkBench Tab\")\n        layout.addWidget(label)\n\n        self.setLayout(layout)\n```\n\nlog_tab.py\n```python\nfrom PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel\n\n\nclass LogTab(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        layout = QVBoxLayout()\n        label = QLabel(\"Log Tab\")\n        layout.addWidget(label)\n\n        self.setLayout(layout)\n```\n\ncoms_tab.py\n```python\nfrom PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel\n\n\nclass ComsTab(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        layout = QVBoxLayout()\n        label = QLabel(\"Coms Tab\")\n        layout.addWidget(label)\n\n        self.setLayout(layout)\n```"
                },
                "finish_reason": "stop"
              }
            }
          }
        ],
        "usage": {
          "py/object": "openai.openai_object.OpenAIObject",
          "prompt_tokens": 115,
          "completion_tokens": 381,
          "total_tokens": 496,
          "__dict__": {
            "_response_ms": null,
            "_retrieve_params": {},
            "api_key": "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",
            "api_version": null,
            "api_type": null,
            "organization": "user-jdrvlyfsallqbsgsgbnmqk85",
            "api_base_override": null,
            "engine": null,
            "_previous": {
              "prompt_tokens": 115,
              "completion_tokens": 381,
              "total_tokens": 496
            }
          }
        },
        "__dict__": {
          "_response_ms": 9275,
          "_retrieve_params": {},
          "api_key": "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",
          "api_version": null,
          "api_type": null,
          "organization": "user-jdrvlyfsallqbsgsgbnmqk85",
          "api_base_override": null,
          "engine": null,
          "_previous": {
            "id": "chatcmpl-7hBJ2rxrcm18K9bWo0nJSwNhPlBqs",
            "object": "chat.completion",
            "created": 1690525920,
            "model": "gpt-3.5-turbo-16k-0613",
            "choices": [
              {
                "index": 0,
                "message": {
                  "py/id": 35
                },
                "finish_reason": "stop"
              }
            ],
            "usage": {
              "prompt_tokens": 115,
              "completion_tokens": 381,
              "total_tokens": 496
            }
          }
        }
      },
      "answer": "main_window.py\n```python\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QTabWidget\n\nfrom workbench_tab import WorkBenchTab\nfrom log_tab import LogTab\nfrom coms_tab import ComsTab\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n\n        self.setWindowTitle(\"Main Window\")\n\n        self.tab_widget = QTabWidget()\n        self.setCentralWidget(self.tab_widget)\n\n        self.workbench_tab = WorkBenchTab()\n        self.log_tab = LogTab()\n        self.coms_tab = ComsTab()\n\n        self.tab_widget.addTab(self.workbench_tab, \"WorkBench\")\n        self.tab_widget.addTab(self.log_tab, \"Log\")\n        self.tab_widget.addTab(self.coms_tab, \"Coms\")\n\n\nif __name__ == \"__main__\":\n    app = QApplication([])\n    window = MainWindow()\n    window.show()\n    app.exec()\n```\n\nworkbench_tab.py\n```python\nfrom PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel\n\n\nclass WorkBenchTab(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        layout = QVBoxLayout()\n        label = QLabel(\"WorkBench Tab\")\n        layout.addWidget(label)\n\n        self.setLayout(layout)\n```\n\nlog_tab.py\n```python\nfrom PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel\n\n\nclass LogTab(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        layout = QVBoxLayout()\n        label = QLabel(\"Log Tab\")\n        layout.addWidget(label)\n\n        self.setLayout(layout)\n```\n\ncoms_tab.py\n```python\nfrom PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel\n\n\nclass ComsTab(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        layout = QVBoxLayout()\n        label = QLabel(\"Coms Tab\")\n        layout.addWidget(label)\n\n        self.setLayout(layout)\n```",
      "files": {
        "main_window.py": "from PySide6.QtWidgets import QApplication, QMainWindow, QTabWidget\n\nfrom workbench_tab import WorkBenchTab\nfrom log_tab import LogTab\nfrom coms_tab import ComsTab\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n\n        self.setWindowTitle(\"Main Window\")\n\n        self.tab_widget = QTabWidget()\n        self.setCentralWidget(self.tab_widget)\n\n        self.workbench_tab = WorkBenchTab()\n        self.log_tab = LogTab()\n        self.coms_tab = ComsTab()\n\n        self.tab_widget.addTab(self.workbench_tab, \"WorkBench\")\n        self.tab_widget.addTab(self.log_tab, \"Log\")\n        self.tab_widget.addTab(self.coms_tab, \"Coms\")\n\n\nif __name__ == \"__main__\":\n    app = QApplication([])\n    window = MainWindow()\n    window.show()\n    app.exec()",
        "workbench_tab.py": "from PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel\n\n\nclass WorkBenchTab(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        layout = QVBoxLayout()\n        label = QLabel(\"WorkBench Tab\")\n        layout.addWidget(label)\n\n        self.setLayout(layout)",
        "log_tab.py": "from PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel\n\n\nclass LogTab(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        layout = QVBoxLayout()\n        label = QLabel(\"Log Tab\")\n        layout.addWidget(label)\n\n        self.setLayout(layout)",
        "coms_tab.py": "from PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel\n\n\nclass ComsTab(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        layout = QVBoxLayout()\n        label = QLabel(\"Coms Tab\")\n        layout.addWidget(label)\n\n        self.setLayout(layout)"
      },
      "e_stats": {
        "prompt_tokens": 115,
        "completion_tokens": 381,
        "total_tokens": 496,
        "sp_cost": 0.00034500000000000004,
        "sc_cost": 0.001524,
        "s_total": 0.001869,
        "elapsed_time": 10.141438722610474
      }
    },
    {
      "py/object": "KbServerApp.step.Step",
      "name": "2. Generate log_tab.py",
      "prompt_name": "KEGUI/Generate log_tab.pe",
      "ai": {
        "py/object": "KbServerApp.ai.AI",
        "temperature": 0.0,
        "max_tokens": "10000",
        "model": "gpt-3.5-turbo-16k",
        "mode": "chat"
      },
      "storage_path": "Dynamic/KEGUI/src",
      "messages": [],
      "response": {},
      "answer": "",
      "files": {},
      "e_stats": {
        "prompt_tokens": 0.0,
        "completion_tokens": 0.0,
        "total_tokens": 0.0,
        "sp_cost": 0.0,
        "sc_cost": 0.0,
        "s_total": 0.0,
        "elapsed_time": 0.0
      }
    }
  ]
}